const colorRGB = {
    /**铁红RGB色谱**/
    iron: [[0, 0, 0], [0, 0, 0], [0, 0, 36], [0, 0, 51], [0, 0, 66], [0, 0, 81], [2, 0, 90], [4, 0, 99], [7, 0, 106], [11, 0, 115], [14, 0, 119], [20, 0, 123], [27, 0, 128], [33, 0, 133], [41, 0, 137], [48, 0, 140], [55, 0, 143], [61, 0, 146], [66, 0, 149], [72, 0, 150], [78, 0, 151], [84, 0, 152], [91, 0, 153], [97, 0, 155], [104, 0, 155], [110, 0, 156], [115, 0, 157], [122, 0, 157], [128, 0, 157], [134, 0, 157], [139, 0, 157], [146, 0, 156], [152, 0, 155], [157, 0, 155], [162, 0, 155], [167, 0, 154], [171, 0, 153], [175, 1, 152], [178, 1, 151], [182, 2, 149], [185, 4, 149], [188, 5, 147], [191, 6, 146], [193, 8, 144], [195, 11, 142], [198, 13, 139], [201, 17, 135], [203, 20, 132], [206, 23, 127], [208, 26, 121], [210, 29, 116], [212, 33, 111], [214, 37, 103], [217, 41, 97], [219, 46, 89], [221, 49, 78], [223, 53, 66], [224, 56, 54], [226, 60, 42], [228, 64, 30], [229, 68, 25], [231, 72, 20], [232, 76, 16], [234, 78, 12], [235, 82, 10], [236, 86, 8], [237, 90, 7], [238, 93, 5], [239, 96, 4], [240, 100, 3], [241, 103, 3], [241, 106, 2], [242, 109, 1], [243, 113, 1], [244, 116, 0], [244, 120, 0], [245, 125, 0], [246, 129, 0], [247, 133, 0], [248, 136, 0], [248, 139, 0], [249, 142, 0], [249, 145, 0], [250, 149, 0], [251, 154, 0], [252, 159, 0], [253, 163, 0], [253, 168, 0], [253, 172, 0], [254, 176, 0], [254, 179, 0], [254, 184, 0], [254, 187, 0], [254, 191, 0], [254, 195, 0], [254, 199, 0], [254, 202, 1], [254, 205, 2], [254, 208, 5], [254, 212, 9], [254, 216, 12], [255, 219, 15], [255, 221, 23], [255, 224, 32], [255, 227, 39], [255, 229, 50], [255, 232, 63], [255, 235, 75], [255, 238, 88], [255, 239, 102], [255, 241, 116], [255, 242, 134], [255, 244, 149], [255, 245, 164], [255, 247, 179], [255, 248, 192], [255, 249, 203], [255, 251, 216], [255, 253, 228], [255, 254, 239], [255, 255, 249], [255, 255, 249], [255, 255, 249], [255, 255, 249], [255, 255, 249], [255, 255, 249], [255, 255, 249], [255, 255, 249]],
    /**彩虹RGB色谱**/
    rain: [[0, 0, 0], [0, 0, 0], [15, 0, 15], [31, 0, 31], [47, 0, 47], [63, 0, 63], [79, 0, 79], [95, 0, 95], [111, 0, 111], [127, 0, 127], [143, 0, 143], [159, 0, 159], [175, 0, 175], [191, 0, 191], [207, 0, 207], [223, 0, 223], [239, 0, 239], [255, 0, 255], [239, 0, 250], [223, 0, 245], [207, 0, 240], [191, 0, 236], [175, 0, 231], [159, 0, 226], [143, 0, 222], [127, 0, 217], [111, 0, 212], [95, 0, 208], [79, 0, 203], [63, 0, 198], [47, 0, 194], [31, 0, 189], [15, 0, 184], [0, 0, 180], [0, 15, 184], [0, 31, 189], [0, 47, 194], [0, 63, 198], [0, 79, 203], [0, 95, 208], [0, 111, 212], [0, 127, 217], [0, 143, 222], [0, 159, 226], [0, 175, 231], [0, 191, 236], [0, 207, 240], [0, 223, 245], [0, 239, 250], [0, 255, 255], [0, 245, 239], [0, 236, 223], [0, 227, 207], [0, 218, 191], [0, 209, 175], [0, 200, 159], [0, 191, 143], [0, 182, 127], [0, 173, 111], [0, 164, 95], [0, 155, 79], [0, 146, 63], [0, 137, 47], [0, 128, 31], [0, 119, 15], [0, 110, 0], [15, 118, 0], [30, 127, 0], [45, 135, 0], [60, 144, 0], [75, 152, 0], [90, 161, 0], [105, 169, 0], [120, 178, 0], [135, 186, 0], [150, 195, 0], [165, 203, 0], [180, 212, 0], [195, 220, 0], [210, 229, 0], [225, 237, 0], [240, 246, 0], [255, 255, 0], [251, 240, 0], [248, 225, 0], [245, 210, 0], [242, 195, 0], [238, 180, 0], [235, 165, 0], [232, 150, 0], [229, 135, 0], [225, 120, 0], [222, 105, 0], [219, 90, 0], [216, 75, 0], [212, 60, 0], [209, 45, 0], [206, 30, 0], [203, 15, 0], [200, 0, 0], [202, 11, 11], [205, 23, 23], [207, 34, 34], [210, 46, 46], [212, 57, 57], [215, 69, 69], [217, 81, 81], [220, 92, 92], [222, 104, 104], [225, 115, 115], [227, 127, 127], [230, 139, 139], [232, 150, 150], [235, 162, 162], [237, 173, 173], [240, 185, 185], [242, 197, 197], [245, 208, 208], [247, 220, 220], [250, 231, 231], [252, 243, 243], [252, 243, 243], [252, 243, 243], [252, 243, 243], [252, 243, 243], [252, 243, 243], [252, 243, 243], [252, 243, 243]],
    /**点密度RGB色谱**/
    tlb: [[0, 0, 0], [23, 0, 0], [35, 0, 0], [47, 0, 0], [59, 0, 0], [70, 0, 0], [83, 0, 0], [94, 0, 0], [109, 0, 0], [124, 0, 0], [139, 0, 0], [153, 0, 0], [165, 0, 0], [178, 0, 0], [190, 0, 0], [202, 0, 0], [214, 0, 0], [225, 0, 0], [234, 0, 0], [243, 1, 0], [250, 5, 0], [253, 11, 0], [255, 20, 0], [255, 30, 0], [255, 40, 0], [255, 50, 0], [255, 60, 0], [255, 70, 0], [255, 80, 0], [255, 91, 0], [255, 102, 0], [255, 114, 0], [255, 125, 0], [255, 137, 0], [255, 148, 0], [255, 160, 0], [255, 171, 0], [255, 183, 0], [255, 194, 0], [255, 206, 0], [255, 221, 0], [255, 223, 0], [255, 225, 0], [255, 226, 0], [255, 228, 0], [255, 230, 0], [255, 231, 0], [255, 233, 0], [255, 235, 0], [255, 237, 0], [255, 238, 1], [255, 240, 1], [255, 241, 1], [255, 243, 1], [255, 244, 2], [255, 246, 2], [255, 247, 3], [255, 248, 4], [255, 249, 5], [255, 250, 6], [255, 251, 7], [255, 252, 8], [255, 253, 10], [255, 254, 11]],
    /**JET 颜色 */
    jet: [[0,0,128],[0,0,132],[0,0,136],[0,0,140],[0,0,144],[0,0,148],[0,0,152],[0,0,156],[0,0,160],[0,0,164],[0,0,168],[0,0,172],[0,0,176],[0,0,180],[0,0,184],[0,0,188],[0,0,192],[0,0,196],[0,0,200],[0,0,204],[0,0,208],[0,0,212],[0,0,216],[0,0,220],[0,0,224],[0,0,228],[0,0,232],[0,0,236],[0,0,240],[0,0,244],[0,0,248],[0,0,252],[0,0,255],[0,4,255],[0,8,255],[0,12,255],[0,16,255],[0,20,255],[0,24,255],[0,28,255],[0,32,255],[0,36,255],[0,40,255],[0,44,255],[0,48,255],[0,52,255],[0,56,255],[0,60,255],[0,64,255],[0,68,255],[0,72,255],[0,76,255],[0,80,255],[0,84,255],[0,88,255],[0,92,255],[0,96,255],[0,100,255],[0,104,255],[0,108,255],[0,112,255],[0,116,255],[0,120,255],[0,124,255],[0,128,255],[0,132,255],[0,136,255],[0,140,255],[0,144,255],[0,148,255],[0,152,255],[0,156,255],[0,160,255],[0,164,255],[0,168,255],[0,172,255],[0,176,255],[0,180,255],[0,184,255],[0,188,255],[0,192,255],[0,196,255],[0,200,255],[0,204,255],[0,208,255],[0,212,255],[0,216,255],[0,220,255],[0,224,255],[0,228,255],[0,232,255],[0,236,255],[0,240,255],[0,244,255],[0,248,255],[0,252,255],[1,255,254],[6,255,250],[10,255,246],[14,255,242],[18,255,238],[22,255,234],[26,255,230],[30,255,226],[34,255,222],[38,255,218],[42,255,214],[46,255,210],[50,255,206],[54,255,202],[58,255,198],[62,255,194],[66,255,190],[70,255,186],[74,255,182],[78,255,178],[82,255,174],[86,255,170],[90,255,166],[94,255,162],[98,255,158],[102,255,154],[106,255,150],[110,255,146],[114,255,142],[118,255,138],[122,255,134],[126,255,130],[130,255,126],[134,255,122],[138,255,118],[142,255,114],[146,255,110],[150,255,106],[154,255,102],[158,255,98],[162,255,94],[166,255,90],[170,255,86],[174,255,82],[178,255,78],[182,255,74],[186,255,70],[190,255,66],[194,255,62],[198,255,58],[202,255,54],[206,255,50],[210,255,46],[214,255,42],[218,255,38],[222,255,34],[226,255,30],[230,255,26],[234,255,22],[238,255,18],[242,255,14],[246,255,10],[250,255,6],[254,255,2],[255,252,0],[255,248,0],[255,244,0],[255,240,0],[255,236,0],[255,232,0],[255,228,0],[255,224,0],[255,220,0],[255,216,0],[255,212,0],[255,208,0],[255,204,0],[255,200,0],[255,196,0],[255,192,0],[255,188,0],[255,184,0],[255,180,0],[255,176,0],[255,172,0],[255,168,0],[255,164,0],[255,160,0],[255,156,0],[255,152,0],[255,148,0],[255,144,0],[255,140,0],[255,136,0],[255,132,0],[255,128,0],[255,124,0],[255,120,0],[255,116,0],[255,112,0],[255,108,0],[255,104,0],[255,100,0],[255,96,0],[255,92,0],[255,88,0],[255,84,0],[255,80,0],[255,76,0],[255,72,0],[255,68,0],[255,64,0],[255,60,0],[255,56,0],[255,52,0],[255,48,0],[255,44,0],[255,40,0],[255,36,0],[255,32,0],[255,28,0],[255,24,0],[255,20,0],[255,16,0],[255,12,0],[255,8,0],[255,4,0],[255,0,0],[252,0,0],[248,0,0],[244,0,0],[240,0,0],[236,0,0],[232,0,0],[228,0,0],[224,0,0],[220,0,0],[216,0,0],[212,0,0],[208,0,0],[204,0,0],[200,0,0],[196,0,0],[192,0,0],[188,0,0],[184,0,0],[180,0,0],[176,0,0],[172,0,0],[168,0,0],[164,0,0],[160,0,0],[156,0,0],[152,0,0],[148,0,0],[144,0,0],[140,0,0],[136,0,0],[132,0,0],[128,0,0]]
}

/**
 * HSL颜色值转换为RGB
 * h,s,l设定在 [0, 1] 之间 返回的 r,g,b 在 [0, 255]之间
 * 换算公式改编自 http://en.wikipedia.org/wiki/HSL_color_space.
 * @param {Number} hue 色相
 * @param {Number} saturation 饱和度
 * @param {Number} brightness 亮度
 * @return Array RGB色值数值
 */
const colorHSL = (hue, saturation, brightness) => {
    var r, g, b;

    // check input hsb 
    hue = hue > 239 ? 239 : hue;
    hue = hue < 0 ? 0 : hue;
    saturation = saturation > 240 ? 240 : saturation;
    saturation = saturation < 0 ? 0 : saturation;
    brightness = brightness > 240 ? 240 : brightness;
    brightness = brightness < 0 ? 0 : brightness;

    var H = parseFloat(hue / 239.0);
    var S = parseFloat(saturation / 240.0);
    var L = parseFloat(brightness / 240.0);

    var red = 0,
        green = 0,
        blue = 0;
    var d1, d2;

    if (L == 0) {
        red = green = blue = 0;
    } else {
        if (S == 0) {
            red = green = blue = L;
        } else {
            d2 = (L <= 0.5) ? L * (1.0 + S) : L + S - (L * S);
            d1 = 2.0 * L - d2;

            var d3 = [H + 1.0 / 3.0, H, H - 1.0 / 3.0];
            var rgb = [0, 0, 0];

            for (var i = 0; i < 3; i++) {
                if (d3[i] < 0) {
                    d3[i] += 1.0;
                }

                if (d3[i] > 1.0) {
                    d3[i] -= 1.0;
                }

                if (6.0 * d3[i] < 1.0) {
                    rgb[i] = d1 + (d2 - d1) * d3[i] * 6.0;
                } else {
                    if (2.0 * d3[i] < 1.0) {
                        rgb[i] = d2;
                    } else {
                        if (3.0 * d3[i] < 2.0) {
                            rgb[i] = (d1 + (d2 - d1) * ((2.0 / 3.0) - d3[i]) * 6.0);
                        } else {
                            rgb[i] = d1;
                        }
                    }
                }
            }

            red = rgb[0];
            green = rgb[1];
            blue = rgb[2];
        }
    }

    red = 255.0 * red;
    green = 255.0 * green;
    blue = 255.0 * blue;

    // check rgb
    red = red > 255.0 ? 255.0 : red;
    red = red < 1 ? 0.0 : red;
    green = green > 255.0 ? 255.0 : green;
    green = green < 1 ? 0.0 : green;
    blue = blue > 255.0 ? 255.0 : blue;
    blue = blue < 1.0 ? 0.0 : blue;

    r = parseInt(red + 0.5);
    g = parseInt(green + 0.5);
    b = parseInt(blue + 0.5);

    return 'RGB(' + r + ', ' + g + ', ' + b + ')';
};
/** 颜色相关类 **/
export default class Color {
    constructor() {
        //构造函数
    }

    /**
     * 获取不同色系对应的rgb颜色
     * @param {String} rgb_series 色系
     * @param {Number} percent 百分比
     * @returns rgb颜色值
     */
    static getRGBColorByPercent(rgb_series, percent) {
        var h = 0;
        var s = 0;
        var l = 0;
        switch (rgb_series) {
            case 'blaze':
                h = parseInt(40 * percent);
                s = parseInt(180 + 30 * percent);
                l = parseInt(120 + 80 * percent);
                break;
            case 'rainbow':
                h = parseInt(40 * (1 - percent));
                s = 200;
                l = 180;
                break;
            case 'gray':
                h = 0;
                s = 0;
                l = parseInt(120 + 120 * percent);
                break;
        }
        return colorHSL(h, s, l);
    }

    /**
     * 获取不同色谱对应的rgb颜色值
     * @param {String} rgb_type 色谱类型
     * @param {Number} color_index 色谱索引
     * @return rgb颜色值
     */
    static getRGBColorByIndex(rgb_type, color_index) {
        var colorArr = colorRGB[rgb_type];
        if (colorArr) {
            if (color_index >= colorArr.length) {
                color_index = colorArr.length - 1;
            } else if (color_index < 0) {
                color_index = 0;
            }
            var r = colorArr[color_index][0];
            var g = colorArr[color_index][1];
            var b = colorArr[color_index][2];

            return 'RGB(' + r + ',' + g + ',' + b + ')';
        } else {
            return 'RGB(0,0,0)';
        }
    }


    /**
     * 获取16进制字符串
     * @param {String} rgb_color rgb颜色值
     * @return 颜色16进制字符串
     */
    static getHexColor(rgb_color) {
        if (/^(rgb|RGB)/.test(rgb_color)) {
            var aColor = rgb_color.replace(/(?:\(|\)|rgb|RGB)*/g, '').split(',');
            var strHex = '#';
            for (var i = 0; i < aColor.length; i++) {
                var hex = Number(aColor[i]).toString(16);
                if (hex === '0') {
                    hex += hex;
                }
                strHex += hex;
            }
            if (strHex.length !== 7) {
                strHex = rgb_color;
            }
            return strHex;
        } else if (/#/.test(rgb_color)) {
            var aNum = rgb_color.replace(/#/, '').split('');
            if (aNum.length === 6) {
                return rgb_color;
            } else if (aNum.length === 3) {
                var numHex = '#';
                for (var i = 0; i < aNum.length; i += 1) {
                    numHex += (aNum[i] + aNum[i]);
                }
                return numHex;
            }
        } else {
            return rgb_color;
        }
    }

    /**
     * 获取rgb颜色值
     * @param {String} hex_color 颜色16进制字符串
     * @param {Number} percent 百分比,小数
     * @return rgb颜色值
     */
    static getRGBColor(hex_color, percent) {
        var color1, color2, color3;
        hex_color = "" + hex_color;
        if (typeof hex_color !== "string") return;
        if (hex_color.charAt(0) == "#") {
            hex_color = hex_color.substring(1);
        }
        if (hex_color.length == 3) {
            hex_color = hex_color[0] + hex_color[0] + hex_color[1] + hex_color[1] + hex_color[2] + hex_color[2];
        }
        if (/^[0-9a-fA-F]{6}$/.test(hex_color)) {
            color1 = parseInt(hex_color.substr(0, 2), 16);
            color2 = parseInt(hex_color.substr(2, 2), 16);
            color3 = parseInt(hex_color.substr(4, 2), 16);
            return `rgb(${color1},${color2},${color3},${percent})`;
        }
    }

    /**
     * 获取不同色谱对应的颜色集合
     * @param {*} rgb_type 色谱类型
     * @return 颜色16进制字符串集合
     */
    static getColorList(rgb_type) {
        var colorList = [];
        if (rgb_type === 'blaze') {
            for (var j = 0; j < 1; j = j + 0.01) {
                var rgbColor = this.getRGBColorByPercent(rgb_type, j);
                colorList.push(this.getHexColor(rgbColor));
            }
        } else {
            var colorArr = colorRGB[rgb_type];
            if (colorArr) {
                for (var i = 0; i < colorArr.length; i++) {
                    var rgbColor = this.getRGBColorByIndex(rgb_type, i);
                    colorList.push(this.getHexColor(rgbColor));
                }
            }
        }
        return colorList;
    }
};